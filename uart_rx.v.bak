module uart_rx(

	input clk,
	input rdy_clr,
	output reg rdy, 
	input rx_input_data,
	output reg rx_loop_data


); 

	parameter 	IDEL_ST 	= 3'b000,
					START_ST = 3'b001,
					DATA_ST  = 3'b010,
					STOP_ST	= 3'b011 ; 
					
	reg [3:0] rx_state = 0 ; 
	reg [8:0] clk_count = 0 ; 
	reg 		 rx_data = 1'b0 ; 
	reg [7:0] rx_output = 0 ; 
	reg [2:0] rx_idx = 0 ; 
	
	
	always@(*) begin 
		rx_data <= rx_input_data ; 
		end
	
	always@(posedge clk, negedge rdyclr) begin 
		if(!rdy_clr) 
			rdy <= 0 ; 
		else begin 
			case (rx_state) 
				IDLE_ST :
				begin 
				rx_loop_data <= 1;
				clk_count 	 <= 0;
					if(rx_data == 1'b0) 
						begin 
							rx_state <= START_ST ; 
						end
					else 
						begin 
							rx_state <= IDLE_ST ; 
						end
				end
				START_ST :
				begin 
				rx_loop_data <= 0; 
					if(clk_count == 434)
						begin 
							clk_count <= 0 ; 
							rx_state <= DATA_ST ; 
						end
					else
						begin 
						clk_count <= clk_count +1 ; 
						end
				end 
				
				DATA_ST : 
				begin 
				rx_loop_data <= rx_data ;
					if(clk_count == 434) 
						begin 
							clk_count <= 0 ;
							rx_output[rx_idx] <= rx_data ; 
							if(rx_idx == 7) 
								begin 
									rx_idx <= 0 ; 
									rx_state <= STOP_ST ; 
								end
							else 
								begin 
									rx_idx <= rx_idx + 1 ; 
								end
						end
					else 
						clk_count <= clk_count + 1 ; 
				end 
				
				STOP_ST :
				begin 
					rx_loop_data <= 1'b1 ; 
					if(clk_count == 434 ) 
					begin 
						clk_count <= 0 ; 
						rx_state <= IDLE_ST ; 
						rdy <= 1'b1 ; 
					end
					
					else 
						clk_count <= clk_count + 1; 
				end 
				
				default : 
					rx_state <= IDLE_ST ; 
				
				endcase 
			
			end 
				
				
					


endmodule